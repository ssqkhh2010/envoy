一个端口号（port）和一个 IP 地址（ip），然后使用 htons() 和 htonl() 函数将它们转换为网络字节序
QApplication app(argc, argv);这个代码在java里相当于QApplication app = new QApplication(argc, argv)这个属性定义功能吗。
宏#ifdef _WIN32
    // 创建 FD_SET 结构
    fd_set read_fds; //声明一个fd_set类型的变量read_fds，用于存储需要监视的文件描述符集合。
    FD_ZERO(&read_fds); //调用FD_ZERO宏，将read_fds集合中的所有文件描述符清零。这是在使用fd_set前的初始化步骤。
    FD_SET((SOCKET)fd, &read_fds);  //调用FD_SET宏，将指定的文件描述符fd添加到read_fds集合中。这意味着我们希望监视fd的状态变化（在这个例子中，我们关心的是可读状态）。
#else
    fd_set read_fds;
    FD_ZERO(&read_fds);
    FD_SET(fd, &read_fds);
#endif

constexpr在编译时计算表达式的值(有点像宏)
constexpr int result = square(4); // 在编译时计算结果
Person(const std::string& name, int age) : name(name), age(age) {} 
virtual void makeSound() const 中的virtual与const是什么意思
numbers.erase(std::remove_if(numbers.begin(), numbers.end(), isEven), numbers.end()); numbers.erase什么意思
void *print_hello(void *data) 第一个void * 是什么意思
:: 来表示命名空间或类的成员
void *表示一个通用指针。它可以指向任何类型的数据，但不能直接使用。(有点像Object)
  int value = 42;
  void *data = &value; // 将int *指针转换为void *指针
  int *int_ptr = static_cast<int *>(data); // 将void *转换为int *指针
  std::cout << "Hello, the value is: " << *int_ptr << std::endl; // 使用int *指针访问数据




std::make_unique 创建和管理动态分配对象的方法。是一个优选的内存分配方法，因为它提供了自动内存管理和异常安全性。



